<chapter title="எழில் மடக்கு கட்டளைகள்">
<section>
கணினியின் மிகப் பெரிய பலங்களில் ஒன்று, சில செயல்களைத் திரும்பத் திரும்பச் செய்வது.

ஆங்கிலத்தில் இதனை Loop என்பார்கள். தமிழில் ’வளையம்’ என்று சொல்லலாம். அதாவது, ஒரு வளையத்தின்மீது ஊர்ந்து செல்லும் எறும்பைப் போல், சுற்றிச் சுற்றி வருவது.

ஆனால், அப்படி நிரந்தரமாகச் சுற்றிக்கொண்டே இருக்கமுடியாதல்லவா? ஒருகட்டத்தில் அதிலிருந்து வெளியே வரவேண்டும். அதற்கு ஒரு நிபந்தனை(Condition)யைத் தரவேண்டும்.

ஓர் உதாரணத்தோடு பார்ப்போம். எழில் மொழியில் ‘வரை’ என்ற குறிச்சொல்லைப் பயன்படுத்தி (ஆங்கிலத்தில் "While") ஓர் எளிய நிரல் எழுதுவோம்.

<code>
#*************************************
அ = 0

@(அ &lt; 5) வரை

	பதிப்பி "வணக்கம்!"
	அ = அ + 1

முடி
#*************************************
</code>

இந்த நிரலை வரி வரியாகப் படித்துப் புரிந்துகொள்வோம்:
<list>
	1. முதலில் "அ" என்ற மாறியில் 0 என்ற எண்ணைச் சேமிக்கிறோம்
	2. அடுத்து, அந்த "அ" என்ற மாறியில் உள்ள எண் ஐந்தைவிடக் குறைவா என்று பார்க்கிறோம் (ஆம்!)
	3. ஆம் எனில், நாம் இரண்டு வேலைகளைச் செய்கிறோம்:
	4. திரையில் வணக்கம் என்று அச்சிடுகிறோம்
	5. "அ" என்ற மாறியுடன் ஒன்றைக் கூட்டுகிறோம். அதாவது அ = 0 + 1 = 1
	6. மறுபடி, "அ" என்ற மாறியில் உள்ள எண் ஐந்தைவிடக் குறைவா என்று பார்க்கிறோம் (ஆம்!)
	7. மறுபடி, திரையில் "வணக்கம்" என்று அச்சிடுகிறோம், "அ" என்ற எண்ணுடன் ஒன்றைக் கூட்டுகிறோம் அ = 1 + 1 = 2
	8. இப்படியே 6, 7 இரண்டையும் திரும்பத் திரும்ப செய்கிறோம், "அ" என்ற எண்ணில் 3, 4, 5 என்ற எண்கள் பதிவாகின்றன
	9. இப்போது "அ" என்ற மாறியில் பதிவாகியிருக்கும் எண் ஐந்தைவிடக் குறைவாக இல்லை, ஆகவே நிரலை அத்துடன் நிறைவு செய்துவிடுகிறோம்
</list>
இப்போது கணக்குப் போட்டுச் சொல்லுங்கள், "வணக்கம்" என்ற சொல் எத்தனைமுறை அச்சாகியிருக்கிறது?

ஐந்து முறை, இல்லையா?

அதுதான் "வரை" என்ற குறிச்சொல்லின் வேலை. நாம் குறிப்பிடும் நிபந்தனை (அ &lt; 5) உண்மையாக உள்ளவரை, அதே வேலையைத் திரும்பத் திரும்பச் செய்துகொண்டிருக்கும்.

கிட்டத்தட்ட இதேபோல், "செய்", "முடியேனில்" என்ற இரண்டு குறிச்சொற்கள் இருக்கின்றன. ஆங்கிலத்தில் இவற்றை "Do Until Statement" என்று அழைப்பார்கள்.

இதற்கு ஓர் உதாரணம் இதோ:
<code>
#*************************************
அ = 0

செய்

	பதிப்பி "வணக்கம்!"
	அ = அ + 1

முடியேனில் @(அ &lt; 5)
#*************************************
</code>
இந்த நிரலும் முந்தைய நிரலைப்போலவேதான் உள்ளது. ஆனால், இதனை எழுதி இயக்கிப் பார்த்தால் ஒரு மிகப் பெரிய வித்தியாசம் தெரியவரும், இங்கே "வணக்கம்" என்ற சொல் ஐந்து முறை அல்ல, ஆறு முறை அச்சாகும்.

ஏன் தெரியுமா?

"வரை" என்ற குறிச்சொல்லைப் பயன்படுத்தும்போது, உங்கள் கணினி "அ &lt; 5" என்ற நிபந்தனையை முதலில் பரிசோதித்துவிட்டு, அதன்பிறகுதான் நாம் சொல்வதை அச்சிடும். ஆகவே, அ = 5 என்று ஆனதும், உடனடியாக அச்சிடுவதை நிறுத்திவிடும்.

ஆனால் "செய்", "முடியேனில்" ஆகிய குறிச்சொற்கள் அப்படியல்ல, இவற்றைப் பயன்படுத்தினால் உங்கள் கணினி முதலில் அச்சிட்டுவிட்டு, அதன்பிறகுதான் "அ &lt; 5" என்ற நிபந்தனையைப் பரிசோதிக்கும். ஆகவே, அ = 5 என்று ஆனபிறகும், கூடுதலாக இன்னொருமுறை (அதாவது, 6வது முறையாக) "வணக்கம்" என்று அச்சிட்டுவிட்டுதான் நிற்கும்.

இதனால், நீங்கள் நிரல் எழுதும்போது எப்போது "வரை" பயன்படுத்தவேண்டும், எப்போது "செய்", "முடியேனில்" கூட்டணியைப் பயன்படுத்தவேண்டும் என்று யோசித்துத் தீர்மானிக்கவேண்டும். தவறுகளைத் தவிர்க்கவேண்டும்.

இப்போது, உங்களுக்கு ஒரு பயிற்சி:
<list>
	* திரையில் ஓர் எண்ணைக் கேட்கவேண்டும்
	* அந்த எண் ஐம்பதாகவோ, அல்லது அதைவிடக் குறைவான ஓர் எண்ணாகவோ இருந்தால், அதற்குப் பதில் இன்னோர் எண்ணைக் கேட்கவேண்டும்
	* ஐம்பதைவிடப் பெரிய ஓர் எண் வரும்வரை தொடர்ந்து கேட்டுக்கொண்டே இருக்கவேண்டும்
</list>

விடை:
<code>
#*************************************
அ = உள்ளீடு ("ஏதாவது ஓர் எண்ணைத் தாருங்கள் ")

@(அ&lt;=50) வரை

	அ = உள்ளீடு("இந்த எண் வேண்டாம். இன்னோர் எண்ணைத் தாருங்கள் ")

முடி

பதிப்பி "நன்றி!"
#*************************************
</code>

அடுத்து, நாம் "தேர்ந்தெடு" என்ற குறிச்சொல்லைக் கற்றுக்கொள்ளப்போகிறோம். ஆங்கிலத்தில் இதனை Case Statement என்று அழைப்பார்கள்.

இதை ஓர் உதாரணத்துடன் பார்த்தால் புரியும். உங்கள் வகுப்பில் உள்ள ஒவ்வொருவரின் பெயரைக் கேட்டு, அவர் ஆணாக இருந்தால் "செல்வன்" என்றும், பெண்ணாக இருந்தால் "செல்வி" என்றும் அடைமொழியோடு அழைத்து வணக்கம் சொல்லவேண்டும். அதற்கு ஒரு நிரல் எழுதுவோம்.
<code>
#*************************************
பெயர் = உள்ளீடு ("உங்கள் பெயர் என்ன? ")
பாலினம் = உள்ளீடு ("நீங்கள் ஆணா? பெண்ணா? ")

@(பாலினம்) தேர்ந்தெடு

தேர்வு @("ஆண்")
	
	பதிப்பி "வணக்கம் செல்வன். ", பெயர்
	நேருத்து

தேர்வு @("பெண்")
	
	பதிப்பி "வணக்கம் செல்வி. ", பெயர்
	நேருத்து

முடி
#*************************************
</code>

எளிமையான நிரல்தான். இல்லையா?
<list>
	* முதலில் உங்கள் நண்பருடைய பெயர் மற்றும் பாலினத்தைக் கேட்டுக்கொள்கிறோம்
	* பின்னர் பாலினத்தை அடிப்படையாக வைத்து, ஒவ்வொரு தேர்வாகப் பார்க்கிறோம்
	* ஆண் எனில் "வணக்கம் செல்வன். " என்று சொல்லி அவர் பெயரை அச்சிடுகிறோம், அதோடு நிரலை நிறுத்திவிடுகிறோம், இதற்கு "நேருத்து" என்ற குறிச்சொல் பயன்படுகிறது
	* ஒருவேளை அப்படி நிறுத்தாமல் நிரலை மேலும் தொடரவேண்டும் என்றால், அதற்குத் "தொடர்" என்ற குறிச்சொல்லைப் பயன்படுத்தலாம்
	* உங்கள் நண்பர் பெண் எனில் "வணக்கம் செல்வி. " என்று சொல்லி அவர் பெயரை அச்சிடுகிறோம், அதோடு நிரலை நிறுத்திவிடுகிறோம்
	* நிறைவாக "முடி" என்ற குறிச்சொல்லைப் பயன்படுத்தி வளையத்தை நிறைவு செய்கிறோம்
</list>
இப்படி இரண்டு, மூன்று "தேர்வு"கள்மட்டும் இருந்தால், எளிதாக நிரல் எழுதிவிடலாம், நிறைய "தேர்வு"கள் இருந்துவிட்டால், ஒவ்வொன்றாக யோசித்து எழுதுவது சிரமமாயிற்றே.

பிரச்னையில்லை, அதற்காக "ஏதேனில்" என்ற குறிச்சொல் உள்ளது, அதற்குமேலே தரப்பட்டுள்ள எந்தத் "தேர்வு"ம் பொருந்தாவிட்டால், இங்கே உள்ள நிரல் வரிகள் நிறைவேற்றப்படும். உதாரணமாக:

<code>
#*************************************
ஊர் = உள்ளீடு ("உங்கள் ஊர் என்ன? ")

@(ஊர்) தேர்ந்தெடு

தேர்வு @("சென்னை")

	பதிப்பி "சென்னையில் உள்ள மெரீனா கடற்கரை அழகானது!"
	நேருத்து

தேர்வு @("கோவை")

	பதிப்பி "கோவையின் தமிழ் மிக இனிமையானது!"
	நேருத்து

தேர்வு @("மதுரை")

	பதிப்பி "சிறந்த கோயில்கள் நிறைந்தது மதுரை!"
	நேருத்து

ஏதேனில்

	பதிப்பி "உங்கள் ஊர்பற்றி அறிந்ததில் மகிழ்ச்சி!"
	நேருத்து
முடி
#*************************************
</code>

அவ்வளவுதான், எல்லா ஊர்களையும் பட்டியல் போடாமல், "ஏதேனில்" என்ற குறிச்சொல்லைப் பயன்படுத்திவிட்டோம். சென்னை, கோவை, மதுரைதவிர மற்ற அனைத்து ஊர்களுக்கும் இந்த வரிதான் அச்சிடப்படும்.

உங்கள் வீட்டுச் சமையலறையில் சிறிய, பெரிய தட்டுகள் இருந்தால், ஒரு தட்டை இன்னொன்றுக்குள் பொருத்தலாம் அல்லவா? அதுபோல, எழில் கணினி மொழியில் இந்த வளையங்களை ஒன்றுக்குள் ஒன்று என அமைக்கலாம். அதனைப் ‘பின்னல் வளையம்’ (Nested Loop) என்பார்கள்.

ஆனால் ஒன்று, பின்னல் வளையம் என்பது, ஒரு தட்டுக்குள் இன்னொன்றை வைப்பதுபோல், உள்ளே இருக்கும் வளையம் கச்சிதமாக வெளி வளையத்துக்குள் பொருந்தவேண்டும். இல்லாவிட்டால், உங்கள் நிரல் வேலை செய்யாது.

பின்னல் வளையங்களை எப்படி அமைப்பது என்பதற்கு உதாரணமாக இந்த நிரலைப் பாருங்கள்:

<code>
#*************************************
அ = 1

@(அ &lt;= 10) வரை
	
	ஆ = 1
	
	@(ஆ &lt;= 10) வரை
	
		இ = அ * ஆ

		பதிப்பி அ, " * ", ஆ, " = ", இ

		ஆ = ஆ + 1

	முடி

	அ = அ + 1

முடி
#*************************************
</code>

இந்த நிரல் 1 * 1 = 1 என்பதில் தொடங்கி 10 * 10 = 100 என்பதுவரையிலான பெருக்கல் வாய்ப்பாட்டை உங்களுடைய திரையில் அச்சிடும்.

இங்கே "அ" என்ற மாறியை அடிப்படையாகக் கொண்ட வளையம் வெளியே உள்ளது, "ஆ" என்ற இன்னொரு மாறியை அடிப்படையாகக் கொண்ட வளையம் உள்ளே இருக்கிறது, அது முடிந்தபிறகுதான் வெளிவளையமும் முடிகிறது என்பதைக் கவனித்துப் பாருங்கள்.

இப்போது, உங்களுக்கு ஒரு பயிற்சி:
<list>
	* நீங்கள் ஒன்றிலிருந்து நூறுக்குள் ஓர் எண்ணைத் தீர்மானித்துக்கொள்ளவேண்டும் (இதற்கு நீங்கள் "randint(1,100)" என்ற கட்டளையைப் பயன்படுத்தலாம்)
	* மற்றவர்களை அதை ஊகிக்கச் செய்யவேண்டும், அவர்களுக்கு உதவியாக, சிறு துப்பு(Clue)கள் தரலாம்
	* பத்து முயற்சிகளுக்குள் அவர்கள் அந்த எண்ணைச் சரியாக ஊகித்துவிட்டால், அவர்கள் வெற்றி பெற்றார்கள் என அறிவிக்கவேண்டும்
</list>
விடை:
<code>
#*************************************
எண் = randint(1,100)

வாய்ப்பு = 0

@(வாய்ப்பு &lt; 10 ) வரை

   ஊகித்தஎண் = உள்ளீடு ("ஒன்றிலிருந்து நூறுக்குள் உள்ள ஏதோ ஓர் எண்ணை நான் மனத்தில் நினைத்துள்ளேன். அது என்ன என்று உங்களால் ஊகிக்கமுடியுமா? ")

  வாய்ப்பு = வாய்ப்பு + 1

   @( எண் == ஊகித்தஎண் ) ஆனால்
      பதிப்பி "வாழ்த்துக்கள்! சரியான பதில்!"
      exit(0)
   முடி

   @( எண் &lt; ஊகித்தஎண் ) ஆனால்
      பதிப்பி "நீங்கள் சொல்லும் எண் தவறு, நான் நினைத்த எண்ணைவிட அது பெரியது!"
   இல்லை
      பதிப்பி "நீங்கள் சொல்லும் எண் தவறு, நான் நினைத்த எண்ணைவிட அது சிறியது"
  முடி
  
  பதிப்பி "கவலை வேண்டாம், இன்னும் ", (10 - வாய்ப்பு), " வாய்ப்புகள் உள்ளன. நீங்கள் நிச்சயம் வெல்லலாம், மீண்டும் முயற்சி செய்யுங்கள்!"

முடி

பதிப்பி "மன்னிக்கவும், நீங்கள் பத்து வாய்ப்புகளுக்குள் சரியான எண்ணைக் கண்டுபிடிக்கவில்லை!"
#*************************************
</code>

அடுத்து, ’ஒவ்வொன்றாக’ என்கிற ஒரு குறிச்சொல்லைப் பார்க்கவிருக்கிறோம். ஆங்கிலத்தில் இதனை 'For Each Loop' என்று அழைப்பார்கள்.

உதாரணமாக, ஒன்று முதல் ஆறு வரை உள்ள எண்களை அச்சிடவேண்டும் என்றால், அதை இப்படிச் செய்யலாம்:

<code>
#*************************************
எண்கள் = [1, 2, 3, 4, 5, 6]

@(எண்கள் இல் இவ்வெண்) ஒவ்வொன்றாக
	பதிப்பி இவ்வெண்
முடி
#*************************************
</code>

இங்கே நாம் ‘எண்கள்’ என்ற பட்டியலில் ஆறு எண்களை வைத்துள்ளோம். பின்னர் அவற்றை ஒவ்வொன்றாக எடுத்து ‘இவ்வெண்’ என்ற பெயரில் சேமிக்கிறோம், பின் அதனை அச்சிடுகிறோம்.

ஒருவேளை, ஆறுக்குப் பதில் நூறு எண்கள் இருந்தால்? அத்துணை நீளமாக எழுதுவது சிரமம் ஆயிற்றே!

உண்மைதான். அதற்காகவே ‘எழில்’ மொழியில் ‘ஆக’ என்ற குறிச்சொல் உள்ளது. இதனைப் பயன்படுத்தினால், ஒவ்வொன்றாக எழுதாமல், அதனை ஒரு கணக்காகச் செய்துவிடலாம், இப்படி:

<code>
#*************************************
@(எண் = 1, எண் &lt;= 100, எண் = எண் + 1) ஆக

	பதிப்பி எண்

முடி
#*************************************
</code>

மிக எளிய நிரல்தான். ஒவ்வொரு வரியாகப் படித்தால் தெளிவாகப் புரிந்துவிடும்:
<list>
	* முதலில் ‘எண்’ என்ற பெயரில் 1 என்ற எண்ணைச் சேமிக்கிறோம்
	* பிறகு, ‘எண் &lt;= 100’ என்று நிபந்தனை விதிக்கிறோம்
	* நிறைவாக, எண்ணை ஒவ்வொன்றாக அதிகரிக்கிறோம்
	* ஆக, ’எண்’ என்பது 1, 2, 3, 4, 5, 6 ... என படிப்படியாக அதிகரிக்கும், திரையில் அச்சிடப்படும்
	* அந்த ’எண்’ 101ஆக மாறியதும், ‘எண் &lt;= 100’ என்ற நிபந்தனை தவறாகிவிடுகிறது, ஆகவே, அதற்குமேல் அச்சிடுவதை நிறுத்திவிடுகிறோம்
</list>

இப்போது, உங்களுக்கு ஒரு பயிற்சி:
<list>	
	* ஒன்று முதல் ஆயிரம் வரை உள்ள எண்களில் ஒற்றைப்படை எண்களைமட்டும் திரையில் அச்சிடவேண்டும்
	* அடுத்தபடியாக, ஆயிரத்திலிருந்து ஒன்றுவரை உள்ள எண்களில் இரட்டைப்படை எண்களைமட்டும் திரையில் அச்சிடவேண்டும்
	* இதற்கு நீங்கள் "%" என்ற குறியீட்டைப் பயன்படுத்தலாம், அது இரு எண்களை வகுத்து, அதன்பிறகு மீதமுள்ள எண்ணைமட்டும் தரும்.
</list>

விடை:

<code>
#*************************************
பதிப்பி "ஒற்றைப்படை எண்கள்"
@(எண்=1, எண் &lt;=1000, எண் = எண் + 1) ஆக

	மீதம் = எண் % 2
	@(மீதம் == 1) ஆனால்
		# ஒற்றைப்படை எண்
		பதிப்பி எண்
	முடி
முடி

பதிப்பி "இரட்டைப்படை எண்கள்"
@(எண்=1000, எண் >= 1, எண் = எண் - 1) ஆக

	மீதம் = எண் % 2
	@(மீதம் == 0) ஆனால்
		#இரட்டைப்படை எண்
		பதிப்பி எண்
	முடி

முடி
#*************************************
</code>

</section>
</chapter>